#include <iostream>

using namespace std;

class node
{
    int data;
    node * left;
    node * right;
    
public:
    node(int i)
    {
        data = i;
        left = NULL;
        right = NULL;
    }
    
    void setData(int d) {data = d;}
    void setLeft(node * l) {left = l;}
    void setRight(node * r) {right = r;}
    int getData() {return data;}
    node * getLeft() {return left;}
    node * getRight() {return right;}
    
    bool isBST()
    {
        return isBSTUtil(this, INT_MIN, INT_MAX);
    }
    
    // min is the min value possible for the left sub-tree
    // max is the max value poossible for the right sub-tree
    
    bool isBSTUtil(node * root, int min, int max)
    {
        if(root == NULL)    //empty Trees are BST
            return true;
        else if(root->data > max || root->data < min)
            return false;
        else 
            return (isBSTUtil(root->left, INT_MIN,root->data-1) && (isBSTUtil(root->right, root->data+1, INT_MAX)));
    }
    
};


int main()
{
	node * root = new node(6);
    node * node1 = new node(4);
    node * node2 = new node(9);
    node * node5 = new node(5);
    
    root->setLeft(node1);
    root->setRight(node2);
    node1->setRight(node5);
    
    cout<<(bool)root->isBST();
    
	return 0;
}
